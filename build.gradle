plugins {
	id 'fabric-loom' version '0.9-SNAPSHOT'
	id 'maven-publish'
}

import net.fabricmc.loom.task.RunGameTask
import net.fabricmc.loom.build.nesting.JarNester

import java.nio.file.Files

archivesBaseName = project.archives_base_name

apply plugin: 'fabric-loom'
apply plugin: 'maven-publish'

allprojects { Project proj ->
	apply plugin: 'fabric-loom'
	apply plugin: 'maven-publish'

	sourceCompatibility = JavaVersion.VERSION_16
	targetCompatibility = JavaVersion.VERSION_16

	version = project.mod_version
	group = project.maven_group

	dependencies {
		repositories {
			mavenLocal()
			maven {
				name = 'COVID-Trump'
				url = 'https://covid-trump.github.io/mvn/'
			}
		}
		//to change the versions see the gradle.properties file
		minecraft "com.mojang:minecraft:${project.minecraft_version}"
		mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
		modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

		// Fabric API. This is technically optional, but you probably want it anyway.
		modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

		//include project(':shurlin-linkage')
		// PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
		// You may need to force-disable transitiveness on them.
	}

	sourceSets {
		testmod {
			compileClasspath += main.compileClasspath
			runtimeClasspath += main.runtimeClasspath
		}
	}

	processResources {
		inputs.property "version", project.version

		filesMatching("fabric.mod.json") { expand 'version': project.version }
	}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	tasks.withType(JavaCompile).configureEach {
		it.options.encoding = "UTF-8"
	}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
	java {
		withSourcesJar()
	}

	jar {
		from ("LICENSE") {
			rename { "${it}_$archivesBaseName" }
		}
	}

	tasks.withType(RunGameTask.class).configureEach {
		it.jvmArgs "-Dmixin.debug.export=true"
	}

// configure the maven publication
	publishing {
		publications {
			mavenJava(MavenPublication) {
				artifactId = "$archives_base_name"
				// add all the jars that should be included when publishing to maven
				artifact(remapJar) {
					builtBy remapJar
				}
				artifact(sourcesJar) {
					builtBy remapSourcesJar
				}
			}
		}

		// select the repositories you want to publish to
		repositories {
			// uncomment to publish to the local maven
			mavenLocal()
		}
	}

	loom {
		runs {
			testmodClient {
				client()
				ideConfigGenerated project.rootProject == project
				name "Testmod Client"
				source = sourceSets.testmod
			}
			testmodServer {
				server()
				ideConfigGenerated project.rootProject == project
				name "Testmod Server"
				source = sourceSets.testmod
			}
		}
	}
}

task makeFullJar  {
	def nestedProj = project(':shurlin-linkage')
	mustRunAfter remapJar, nestedProj.remapJar
	//println 'DEBUGGING MAKEFULLJAR'
	def sourceFile = file("build/libs/$archivesBaseName-${project.version}.jar")
	def nestedFile = nestedProj.file("build/libs/" +
			//"${nestedProj.archivesBaseName}" +
			"sweet_potato_mod-shurlin-linkage" +
			"-${nestedProj.version}.jar")

	doLast {
		def targetFile = file("build/libs/$archivesBaseName-${project.version}-cpt.jar")
		Files.deleteIfExists targetFile.toPath()
		Files.copy sourceFile.toPath(), targetFile.toPath()
		JarNester.nestJars([nestedFile], targetFile, project.logger)
	}
}
